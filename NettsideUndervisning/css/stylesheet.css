:ROOT{
  /*Vi danner variabler ved å ta -- før variabelnavnet.*/
  --basic-gray: #efefefef;
  --basic-red: #6a0404;
}


*{
  box-sizing: border-box; /*Gjør det innover i stedet for utover*/
}

body{
  font-family: Arial, Helvetica, sans-serif;
  margin: 0; /*Vi fjerner margen, slik at det går helt ut i kanten.*/
}

#page-container{
  display:grid;
  /*Metode 1 grid, men det er kommentert ut*/
  /* grid-template-areas: "header header header"; : Det inni anførselstegn er variabelnavn, men bør ha intuative navn. I dette eksempelet har det ingenting med headertaggen å gjøre.*/
  /*grid-template-areas: "header" "hero" "main" "aside" "footer";*/ /*metode 1*/

  /*Her er metode 2 grid:*/
  grid-template-columns:1fr;
  grid-template-rows: auto auto auto auto auto;
}

/* =============== GLOBAL HEADER =============== */
/*Vi har laget en id til hoved headeren*/
#global-header{
  display: flex; /*Flexbox (jeg tror dette er en del av flexbox) er et kraftig verktøy for å designe responsive og fleksible layouter som tilpasser seg innholdets størrelse og tilgjengelig plass. */
  justify-content: space-between; /*All luften som er tilgjengelig blir brukt på å ha avstand mellom logo og lista. Plasserer logo til venstre og navigasjon til høyre*/
  align-items: center; /*Vertikal sentrering av innholdet*/
  padding: 1rem;
  
  /*grid-area: header;*/ /*Metode 1 grid*/
  
  /*Metode 2 grid*/
  grid-column-start: 1;
  grid-column-end: 2;

  grid-row-start:1;
  grid-row-end: 2;

  /*Jeg vil endre på li som er inni ul, som er inni nav, som er inni global-header:*/
  nav{
    ul{
      padding: 0; /*For å få den tettere mot margen*/
      margin: 0; /*For å få den tettere mot margen*/
      
      li{
        list-style: none; /*none: Nå forsvinner kulepunktene på lista*/
        display: inline-block; /*Viser menyvalg horisontalt i stedet for vertikalt*/
      }
    }
  }
}

#mainlogo {
  font-size: 30px;
  font-family: Arial, Helvetica, sans-serif;
  font-weight: 900;
  color: #f00;
  text-decoration: none;
}

a {
  color: black;
  text-decoration: none;
}

.deal-section{
  background-image: url("https://picsum.photos/1200/500?grayscale");
  background-repeat: no-repeat;
  background-size: cover;
  background-position: bottom;
  background-color:var(--basic-gray); /*Vi bruker variabelen som vi har laget for å velge farge. Vi skriver "var" først*/
  padding: 1rem; 
  position:relative;
  height: 50vh; /*vh hjelper når man har små vinduer*/
  min-height: 200px;

  /*Metode 1 grid*/
  /*grid-area: hero;*/

  /*Metode 2 grid*/
  grid-column-start: 1;
  grid-column-end: 2;

  grid-row-start: 2;
  grid-row-end: 3;

  /*Endrer på bildet inni deal section*/
  /*img{
    width: 100%;
  }

  h2, p, a{
    position: absolute; /*skjedd noe feil her*/
  /*}

  p{
    top: 63px;
  }

  a{
    top: 70px;
  }*/


}

/* ========== HOVEDINNHOLD ========== */

main{
  max-width: 1200px;
  width: 100%;
  margin: 1rem auto; /*Hva betyr auto?*/
  /*grid-area: main;*/

  /*Metode 2 grid*/
  grid-column-start: 1;
  grid-column-end: 2;

  grid-row-start: 3;
  grid-row-end: 4;

  section{
    h2{
      text-align: center;
    }

    article{
      margin: 0 auto;
    }
  }

}


article{
  margin: 1rem 0;
  border:1px solid #5a5050; /*Sette en firkant rundt artiklene*/
  max-width: 400px;
  width: 100%;
  min-width: 250px;
  padding: 1rem; /*padding er innvendig luft. Margin er utvendig??*/

  img{
    width: 100%;    /*Skalerer bildet til kortets bredde. Vi skriver det som nesta CSS.. Jeg vil endre på bilet som ligger inni article*/
  }
}


/*Vi endrer på klassen .btn. Dette er "legg i handlevogn"-knappen.*/
.btn {
  display: inline-block;        /*Tillater padding/bredde, men flyter i tekst??*/
  background-color: #000;
  color: #fff;
  padding: 1rem;                /*Stor klikkflate*/
  border: none;                 /* HVA: Fjerner standardkant for renere uttrykk */
}

.side-container{
  background-color: var(--basic-gray);
  padding: 1rem;
  /*grid-area: aside;*/

  /*Metode 2 grid*/
  grid-column-start: 1;
  grid-column-end: 2;

  grid-row-start: 4;
  grid-row-end: 5;

  form{
    input{
      display: block;
      padding: 1rem;
      margin: 0.4rem 0; /*Får 0 på sidene, men ikke over og under*/
    }
  }

}

.age-check{
  display: flex;
  align-items: center;
  gap: 1rem;

}

footer{
  background-color: #0a1b28;
  color: #fff;
  padding: 1rem;
  min-height: 150px;
  /*grid-area: footer;*/

  /*Metode 2 grid*/
  grid-column-start: 1;
  grid-column-end: 2;

  grid-row-start: 5;
  grid-row-end: 6;
}


/*Dette er metode nr. 1*/
/*Endrer på hvordan det ser ut i forhold til hvilken skjermbredde*/
/*Gjelder for skjerm "and" regler det skal gjelde for*/
/*Det gjelder ingen regler for størrelse på brytningspspunktet. Det beste er å teste selv. Når der det innholdet mitt blir stygt i det jeg justerer på vinduet av skjermen?*/
/*Nå gjelder disse reglene under når vidden er over 600px*/
@media only screen and (min-width: 600px){
  
  #page-container{ /*Må passe på at man bruker samme variabelnavn som tidligere: Header, hero, main etc.*/
    
    /*Metode 2 grid*/
    grid-template-columns: 1fr 1fr 0.5fr;
    grid-template-rows: repeat(4, auto);
    
    /*Metode 1 grid*/
    /*grid-template-areas: "header header header"
                        "hero hero hero"
                        "main main aside"
                        "footer footer footer";
    grid-template-columns: 1fr 1fr 0.5fr; /*Bredde på kolonner*/
  }

  /*Metode 2 grid*/
  #global-header{
    grid-column-end: 4;
  }

  .deal-section{
    grid-column-end: 4;
  }

  main{
    grid-column-end: 3;
  }

  .side-container{
    grid-column-start: 3;
    grid-column-end: 4;
    grid-row-start: 3;
    grid-row-end: 4;
  }

  footer{
    grid-column-end: 4;
    grid-row-start: 4;
    grid-row-end: 5;
  }

}

/*Slik gjør man det med flex*/
.flex-container{
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  justify-content: center; /*Da får man bokene i midten*/


  h2{
    width: 100%;
  }

  article{
    min-width: 200px !important; /*Man bør ikke bruke important så ofte. Imortant "overskriver" det andre. Det er mest viktig*/
    margin: 0;
    Flex-grow: 1;
  }

  }

/*Slik kunne man gjort det med grid (men det er best å gjøre det med flex)*/
/*.flex-container{
  display: grid;
  grid-template-columns: repeat(3, 1fr); /*Jeg vil ha 3 kolonner som er 1 fr bred.*/
  /*grid-template-rows: repeat (3, auto); /*To rader med auto høyde*/

  /*h2{
    grid-column-start: 1;
    grid-column-end: 4;
  }
}*/

/*Endrer på "Kategorier"*/
section.flex-grow{ /*Her endrer man bare på seksjon med klassen flex-grow???*/
    justify-content: flex-start; /*Boksene legger seg til venstre*/

    article{
      max-width: 900px; /*Bestemmer maxbredden på artikkelkortene*/
      min-width: 100px;
      width: 31%; /*Dette er 31% av container-størrelsen. Altså 33% av section i dette tilfellet. Det kan være problematisk å bruke %, ettersom f.eks. 33% av noe veldig smalt, blir super smalt. Da kan også bruke min-width*/
    }

    article.grow-1{
      flex-grow: 2;
    }

}

/*Her får man litt puslespilloppsett på kategoriene*/
.grow-1{
  flex-grow: 2;
}

.grow-2{
  flex-grow: 3;
}